{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\food-ordering\\\\src\\\\context\\\\MenuState.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport MenuDataContext from './menuContext'; // Import the new context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction menuDataReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MENU_DATA':\n      return action.payload;\n    case 'ADD_MENU':\n      return [...state, action.payload];\n    case 'DELETE_MENU':\n      return state.filter(menu => menu._id !== action.payload);\n    case 'EDIT_MENU':\n      // Implement the logic to edit a menu item here\n      // You can map over the state and update the item with the matching ID\n      // Return a new array with the updated item\n      return state.map(menu => {\n        if (menu._id === action.payload.id) {\n          return {\n            ...menu,\n            name: action.payload.name,\n            category: action.payload.category,\n            price: action.payload.price,\n            description: action.payload.description,\n            file: action.payload.file\n          };\n        } else {\n          return menu;\n        }\n      });\n    default:\n      return state;\n  }\n}\nconst initialState = []; // Initial state for the menu data\n\nconst MenuState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const [menuData, dispatch] = useReducer(menuDataReducer, initialState);\n  const getMenu = async () => {\n    try {\n      // API CALL\n      const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        // Handle the error if the GET request fails\n        throw new Error('Failed to fetch menu data.');\n      }\n      const json = await response.json();\n\n      // Dispatch the 'SET_MENU_DATA' action with the fetched menu data as payload\n      dispatch({\n        type: 'SET_MENU_DATA',\n        payload: json\n      });\n    } catch (error) {\n      // Handle any errors that occurred during the GET request\n      console.error(error.message);\n    }\n  };\n\n  // Add a menu      \n  const addMenu = async (name, category, price, description, file) => {\n    try {\n      // Make a POST request to add the new menu item\n      const response = await fetch(`${host}/api/menuData/addmenu`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description,\n          file\n        })\n      });\n      if (!response.ok) {\n        // Handle the error if the POST request fails\n        throw new Error('Failed to add a new menu item.');\n      }\n\n      // Parse the response to get the newly added menu item\n      const menu = await response.json();\n\n      // Dispatch the 'ADD_MENU' action with the new menu item as payload\n      dispatch({\n        type: 'ADD_MENU',\n        payload: menu\n      });\n\n      // Optionally, you can show a success message or perform other actions\n      console.log('Menu item added successfully.');\n    } catch (error) {\n      // Handle any errors that occurred during the POST request\n      console.error(error.message);\n    }\n  };\n\n  // Delete a note\n  const deletemenu = async id => {\n    try {\n      // Send a DELETE request to your API to delete the menu item\n      const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        }\n      });\n      if (!response.ok) {\n        // Handle the error if the delete request fails\n        throw new Error(`Failed to delete menu item with id ${id}`);\n      }\n\n      // Dispatch the 'DELETE_MENU' action with the id\n      dispatch({\n        type: 'DELETE_MENU',\n        payload: id\n      });\n\n      // Optionally, you can show a success message or perform other actions\n      console.log(`Menu item with id ${id} deleted successfully.`);\n    } catch (error) {\n      // Handle any errors that occurred during the delete process\n      console.error(error.message);\n    }\n  };\n\n  // Edit a note\n  const editMenu = async (id, name, category, price, description, file) => {\n    // Validate the _id format\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      console.error(`Invalid _id format: ${id}`);\n      return; // Exit early if the _id is invalid\n    }\n\n    try {\n      // API Call\n      const response = await fetch(`${host}/api/menuData/updatemenu/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description,\n          file\n        })\n      });\n      if (!response.ok) {\n        // Handle the error if the PUT request fails\n        throw new Error(`Failed to update menu item with id ${id}`);\n      }\n\n      // Dispatch the 'EDIT_MENU' action with the updated menu item data as payload\n      const updateMenu = await response.json();\n      dispatch({\n        type: 'EDIT_MENU',\n        payload: {\n          id,\n          ...updateMenu\n        }\n      });\n\n      // Optionally, you can show a success message or perform other actions\n      console.log(`Menu item with id ${id} updated successfully.`);\n    } catch (error) {\n      // Handle any errors that occurred during the PUT request\n      console.error(`Failed to update menu item with id ${id}: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MenuDataContext.Provider, {\n    value: {\n      menuData,\n      addMenu,\n      getMenu,\n      editMenu,\n      deletemenu\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(MenuState, \"pz/V0KsRvRYwY/ojcZpEjJtgYGI=\");\n_c = MenuState;\nexport default MenuState;\nvar _c;\n$RefreshReg$(_c, \"MenuState\");","map":{"version":3,"names":["React","useReducer","MenuDataContext","jsxDEV","_jsxDEV","menuDataReducer","state","action","type","payload","filter","menu","_id","map","id","name","category","price","description","file","initialState","MenuState","props","_s","host","menuData","dispatch","getMenu","response","fetch","method","headers","ok","Error","json","error","console","message","addMenu","localStorage","getItem","body","JSON","stringify","log","deletemenu","editMenu","mongoose","Types","ObjectId","isValid","updateMenu","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/food-ordering/src/context/MenuState.js"],"sourcesContent":["import React, { useReducer } from 'react';\r\nimport MenuDataContext from './menuContext'; // Import the new context\r\n\r\nfunction menuDataReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_MENU_DATA':\r\n            return action.payload;\r\n        case 'ADD_MENU':\r\n            return [...state, action.payload];\r\n        case 'DELETE_MENU':\r\n            return state.filter(menu => menu._id !== action.payload);\r\n        case 'EDIT_MENU':\r\n            // Implement the logic to edit a menu item here\r\n            // You can map over the state and update the item with the matching ID\r\n            // Return a new array with the updated item\r\n            return state.map(menu => {\r\n                if (menu._id === action.payload.id) {\r\n                    return {\r\n                        ...menu,\r\n                        name: action.payload.name,\r\n                        category: action.payload.category,\r\n                        price: action.payload.price,\r\n                        description: action.payload.description,\r\n                        file: action.payload.file,\r\n                    };\r\n                } else {\r\n                    return menu;\r\n                }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialState = []; // Initial state for the menu data\r\n\r\nconst MenuState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n\r\n    const [menuData, dispatch] = useReducer(menuDataReducer, initialState);\r\n\r\n    const getMenu = async () => {\r\n        try {\r\n            // API CALL\r\n            const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle the error if the GET request fails\r\n                throw new Error('Failed to fetch menu data.');\r\n            }\r\n\r\n            const json = await response.json();\r\n\r\n            // Dispatch the 'SET_MENU_DATA' action with the fetched menu data as payload\r\n            dispatch({ type: 'SET_MENU_DATA', payload: json });\r\n        } catch (error) {\r\n            // Handle any errors that occurred during the GET request\r\n            console.error(error.message);\r\n        }\r\n    }\r\n\r\n    // Add a menu      \r\n    const addMenu = async (name, category, price, description, file) => {\r\n        try {\r\n            // Make a POST request to add the new menu item\r\n            const response = await fetch(`${host}/api/menuData/addmenu`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({ name, category, price, description, file })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle the error if the POST request fails\r\n                throw new Error('Failed to add a new menu item.');\r\n            }\r\n\r\n            // Parse the response to get the newly added menu item\r\n            const menu = await response.json();\r\n\r\n            // Dispatch the 'ADD_MENU' action with the new menu item as payload\r\n            dispatch({ type: 'ADD_MENU', payload: menu });\r\n\r\n            // Optionally, you can show a success message or perform other actions\r\n            console.log('Menu item added successfully.');\r\n        } catch (error) {\r\n            // Handle any errors that occurred during the POST request\r\n            console.error(error.message);\r\n        }\r\n    }\r\n\r\n    // Delete a note\r\n    const deletemenu = async (id) => {\r\n        try {\r\n            // Send a DELETE request to your API to delete the menu item\r\n            const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem('token')\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle the error if the delete request fails\r\n                throw new Error(`Failed to delete menu item with id ${id}`);\r\n            }\r\n\r\n            // Dispatch the 'DELETE_MENU' action with the id\r\n            dispatch({ type: 'DELETE_MENU', payload: id });\r\n\r\n            // Optionally, you can show a success message or perform other actions\r\n            console.log(`Menu item with id ${id} deleted successfully.`);\r\n        } catch (error) {\r\n            // Handle any errors that occurred during the delete process\r\n            console.error(error.message);\r\n        }\r\n    };\r\n\r\n    // Edit a note\r\n    const editMenu = async (id, name, category, price, description, file) => {\r\n        // Validate the _id format\r\n        if (!mongoose.Types.ObjectId.isValid(id)) {\r\n            console.error(`Invalid _id format: ${id}`);\r\n            return; // Exit early if the _id is invalid\r\n        }\r\n\r\n        try {\r\n            // API Call\r\n            const response = await fetch(`${host}/api/menuData/updatemenu/${id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({ name, category, price, description, file })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle the error if the PUT request fails\r\n                throw new Error(`Failed to update menu item with id ${id}`);\r\n            }\r\n\r\n            // Dispatch the 'EDIT_MENU' action with the updated menu item data as payload\r\n            const updateMenu = await response.json();\r\n            dispatch({ type: 'EDIT_MENU', payload: { id, ...updateMenu } });\r\n\r\n            // Optionally, you can show a success message or perform other actions\r\n            console.log(`Menu item with id ${id} updated successfully.`);\r\n        } catch (error) {\r\n            // Handle any errors that occurred during the PUT request\r\n            console.error(`Failed to update menu item with id ${id}: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MenuDataContext.Provider value={{ menuData, addMenu, getMenu, editMenu, deletemenu }}>\r\n            {props.children}\r\n        </MenuDataContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MenuState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}