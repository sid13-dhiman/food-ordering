{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\food-ordering\\\\src\\\\context\\\\MenuState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport menuContext from \"./menuContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const menuDataInitial = [];\n  const [menuData, setMenuData] = useState(menuDataInitial);\n  const getMenu = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setMenuData(json);\n  };\n\n  // Add a menu    \n  const addMenu = async (name, category, price, description) => {\n    try {\n      const response = await fetch(`${host}/api/menuData/addmenu`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description\n        })\n      });\n      if (!response.ok) {\n        // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\n        const errorMessage = await response.text();\n        console.error(\"HTTP Error:\", errorMessage);\n        // Handle the error as needed, e.g., display an error message to the user.\n      } else {\n        // Parse the JSON response when successful\n        const newMenu = await response.json();\n        setMenuData([...menuData, newMenu]);\n      }\n    } catch (error) {\n      // Handle network errors or exceptions\n      console.error(\"Network error:\", error);\n      // Handle the error as needed.\n    }\n  };\n\n  // Delete a note\n  const deletemenu = async name => {\n    // API Call\n    const response = await fetch(`${host}/api/menuData/deletemenu`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name\n      })\n    });\n    const json = response.json(); // parses JSON response into native JavaScript objects\n    console.log(json);\n    console.log(\"Deleting the menu with name \" + name);\n    const newMenu = menuData.filter(menu => menu.name !== name);\n    setMenuData(newMenu);\n  };\n\n  // Edit a note\n  const editMenu = async (name, category, price, description) => {\n    // API Call\n    const response = await fetch(`${host}/api/menuData/updatemenu`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        category,\n        price,\n        description\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = await response.json(); // parses JSON response into native JavaScript objects\n    console.log(json);\n\n    // Logic to edit in client\n    const existingMenu = menuData.map(menu => {\n      if (menu.name === name) {\n        return {\n          name,\n          category,\n          price,\n          description\n        };\n      }\n    });\n    setMenuData(existingMenu);\n  };\n  return /*#__PURE__*/_jsxDEV(menuContext.Provider, {\n    value: {\n      menuData,\n      addMenu,\n      getMenu,\n      editMenu,\n      deletemenu\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(MenuState, \"d2WQnwFNpA7H4/hXixOcUYWYmc8=\");\n_c = MenuState;\nexport default MenuState;\nvar _c;\n$RefreshReg$(_c, \"MenuState\");","map":{"version":3,"names":["React","useState","menuContext","jsxDEV","_jsxDEV","MenuState","props","_s","host","menuDataInitial","menuData","setMenuData","getMenu","response","fetch","method","headers","json","addMenu","name","category","price","description","body","JSON","stringify","ok","errorMessage","text","console","error","newMenu","deletemenu","log","filter","menu","editMenu","existingMenu","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/food-ordering/src/context/MenuState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport menuContext from \"./menuContext\";\r\n\r\nconst MenuState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const menuDataInitial = [];\r\n    const [menuData, setMenuData] = useState(menuDataInitial);\r\n\r\n\r\n    const getMenu = async () => {\r\n\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n\r\n        });\r\n        const json = await response.json()\r\n        setMenuData(json);\r\n    }\r\n\r\n    // Add a menu    \r\n    const addMenu = async (name, category, price, description) => {\r\n        try {\r\n            const response = await fetch(`${host}/api/menuData/addmenu`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ name, category, price, description })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\r\n                const errorMessage = await response.text();\r\n                console.error(\"HTTP Error:\", errorMessage);\r\n                // Handle the error as needed, e.g., display an error message to the user.\r\n            } else {\r\n                // Parse the JSON response when successful\r\n                const newMenu = await response.json();\r\n                setMenuData([...menuData, newMenu]);\r\n            }\r\n        } catch (error) {\r\n            // Handle network errors or exceptions\r\n            console.error(\"Network error:\", error);\r\n            // Handle the error as needed.\r\n        }\r\n    };\r\n\r\n    // Delete a note\r\n    const deletemenu = async (name) => {\r\n        // API Call\r\n        const response = await fetch(`${host}/api/menuData/deletemenu`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ name }),\r\n        });\r\n\r\n        const json = response.json(); // parses JSON response into native JavaScript objects\r\n        console.log(json);\r\n\r\n        console.log(\"Deleting the menu with name \" + name);\r\n\r\n        const newMenu = menuData.filter((menu) => menu.name !== name);\r\n        setMenuData(newMenu);\r\n    };\r\n\r\n    // Edit a note\r\n    const editMenu = async (name, category, price, description) => {\r\n        // API Call\r\n        const response = await fetch(`${host}/api/menuData/updatemenu`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n\r\n            body: JSON.stringify({ name, category, price, description }) // body data type must match \"Content-Type\" header\r\n        });\r\n        const json = await response.json(); // parses JSON response into native JavaScript objects\r\n        console.log(json);\r\n\r\n        // Logic to edit in client\r\n        const existingMenu = menuData.map((menu) => {\r\n            if (menu.name === name) {\r\n                return {\r\n                    name,\r\n                    category,\r\n                    price,\r\n                    description,\r\n                };\r\n            }\r\n        });\r\n        setMenuData(existingMenu);\r\n    }\r\n\r\n    return (\r\n        <menuContext.Provider value={{ menuData, addMenu, getMenu, editMenu, deletemenu }}>\r\n            {props.children}\r\n        </menuContext.Provider>\r\n    );\r\n};\r\n\r\nexport default MenuState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}