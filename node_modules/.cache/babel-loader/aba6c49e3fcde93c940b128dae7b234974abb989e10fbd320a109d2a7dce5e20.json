{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\food-ordering\\\\src\\\\context\\\\MenuState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport menuContext from \"./menuContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const menuDataInitial = [];\n  const [menuData, setMenuData] = useState(menuDataInitial);\n  const getMenu = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setMenuData(json);\n  };\n\n  // Add a menu    \n  const addMenu = async (name, category, price, description, file) => {\n    try {\n      const response = await fetch(`${host}/api/menuData/addmenu`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description,\n          file\n        })\n      });\n      if (!response.ok) {\n        // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\n        const errorMessage = await response.text();\n        console.error(\"HTTP Error:\", errorMessage);\n        // Handle the error as needed, e.g., display an error message to the user.\n      } else {\n        // Parse the JSON response when successful\n        const newMenu = await response.json();\n        setMenuData([...menuData, newMenu]);\n      }\n    } catch (error) {\n      // Handle network errors or exceptions\n      console.error(\"Network error:\", error);\n      // Handle the error as needed.\n    }\n  };\n\n  // Delete a note\n  const deletemenu = async id => {\n    try {\n      // API Call\n      const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('id')\n        }\n      });\n      if (response.status === 200) {\n        console.log(`Successfully deleted menu with ID ${id}`);\n\n        // Logic to delete in client\n        const newMenuData = menuData.filter(menu => menu._id !== id); // Assuming _id is the unique identifier\n        setMenuData(newMenuData);\n      } else {\n        console.error(`Failed to delete menu with ID ${id}`);\n      }\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  // Edit a note\n  const editMenu = async (name, category, price, description, file) => {\n    try {\n      // API Call\n      const response = await fetch(`${host}/api/menuData/updatemenu`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description,\n          file\n        })\n      });\n      const json = await response.json(); // parses JSON response into native JavaScript objects\n      console.log(json);\n\n      // Logic to edit in client\n      const updatedMenuData = menuData.map(menu => {\n        if (menu._id === id) {\n          // Use the menu's id to identify it\n          return {\n            ...menu,\n            name,\n            category,\n            price,\n            description,\n            file\n          };\n        }\n        return menu;\n      });\n      setMenuData(updatedMenuData);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(menuContext.Provider, {\n    value: {\n      menuData,\n      addMenu,\n      getMenu,\n      editMenu,\n      deletemenu\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(MenuState, \"d2WQnwFNpA7H4/hXixOcUYWYmc8=\");\n_c = MenuState;\nexport default MenuState;\nvar _c;\n$RefreshReg$(_c, \"MenuState\");","map":{"version":3,"names":["React","useState","menuContext","jsxDEV","_jsxDEV","MenuState","props","_s","host","menuDataInitial","menuData","setMenuData","getMenu","response","fetch","method","headers","json","addMenu","name","category","price","description","file","body","JSON","stringify","ok","errorMessage","text","console","error","newMenu","deletemenu","id","localStorage","getItem","status","log","newMenuData","filter","menu","_id","message","editMenu","updatedMenuData","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/food-ordering/src/context/MenuState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport menuContext from \"./menuContext\";\r\n\r\nconst MenuState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const menuDataInitial = [];\r\n    const [menuData, setMenuData] = useState(menuDataInitial);\r\n\r\n   \r\n    const getMenu = async () => {\r\n\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n\r\n        });\r\n        const json = await response.json()\r\n        setMenuData(json);\r\n    }\r\n       \r\n    // Add a menu    \r\n    const addMenu = async (name, category, price, description, file) => {\r\n        try {\r\n            const response = await fetch(`${host}/api/menuData/addmenu`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ name, category, price, description, file })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\r\n                const errorMessage = await response.text();\r\n                console.error(\"HTTP Error:\", errorMessage);\r\n                // Handle the error as needed, e.g., display an error message to the user.\r\n            } else {\r\n                // Parse the JSON response when successful\r\n                const newMenu = await response.json();\r\n                setMenuData([...menuData, newMenu]);\r\n            }\r\n        } catch (error) {\r\n            // Handle network errors or exceptions\r\n            console.error(\"Network error:\", error);\r\n            // Handle the error as needed.\r\n        }\r\n    };\r\n\r\n    // Delete a note\r\n    const deletemenu = async (id) => {\r\n        try {\r\n            // API Call\r\n            const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem('id')\r\n                },\r\n            });\r\n    \r\n            if (response.status === 200) {\r\n                console.log(`Successfully deleted menu with ID ${id}`);\r\n                \r\n                // Logic to delete in client\r\n                const newMenuData = menuData.filter((menu) => menu._id !== id); // Assuming _id is the unique identifier\r\n                setMenuData(newMenuData);\r\n            } else {\r\n                console.error(`Failed to delete menu with ID ${id}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n\r\n    // Edit a note\r\n    const editMenu = async (name, category, price, description, file) => {\r\n        try {\r\n            // API Call\r\n            const response = await fetch(`${host}/api/menuData/updatemenu`, { \r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ name, category, price, description, file }),\r\n            });\r\n            const json = await response.json(); // parses JSON response into native JavaScript objects\r\n            console.log(json);\r\n    \r\n            // Logic to edit in client\r\n            const updatedMenuData = menuData.map((menu) => {\r\n                if (menu._id === id) { // Use the menu's id to identify it\r\n                    return {\r\n                        ...menu,\r\n                        name,\r\n                        category,\r\n                        price,\r\n                        description,\r\n                        file,\r\n                    };\r\n                }\r\n                return menu;\r\n            });\r\n            setMenuData(updatedMenuData);\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <menuContext.Provider value={{ menuData, addMenu, getMenu, editMenu, deletemenu }}>\r\n            {props.children}\r\n        </menuContext.Provider>\r\n    );\r\n};\r\n\r\nexport default MenuState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}