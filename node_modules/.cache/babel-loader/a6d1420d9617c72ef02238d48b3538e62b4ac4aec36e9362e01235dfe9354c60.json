{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\food-ordering\\\\src\\\\context\\\\MenuState.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport MenuDataContext from './menuContext'; // Import the new context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction menuDataReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MENU_DATA':\n      return action.payload;\n    case 'ADD_MENU':\n      return [...state, action.payload];\n    // Add more cases for edit and delete actions if needed\n    default:\n      return state;\n  }\n}\nconst initialState = []; // Initial state for the menu data\n\nconst MenuState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const [menuData, dispatch] = useReducer(menuDataReducer, initialState);\n  const getMenu = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setMenuData(json);\n  };\n\n  // Add a menu      \n  const addMenu = async (name, category, price, description, file) => {\n    try {\n      // Make a POST request to add the new menu item\n      const response = await fetch(`${host}/api/menuData/addmenu`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          price,\n          description,\n          file\n        })\n      });\n      if (!response.ok) {\n        // Handle the error if the POST request fails\n        throw new Error('Failed to add a new menu item.');\n      }\n\n      // Parse the response to get the newly added menu item\n      const menu = await response.json();\n\n      // Dispatch the 'ADD_MENU' action with the new menu item as payload\n      dispatch({\n        type: 'ADD_MENU',\n        payload: menu\n      });\n\n      // Optionally, you can show a success message or perform other actions\n      console.log('Menu item added successfully.');\n    } catch (error) {\n      // Handle any errors that occurred during the POST request\n      console.error(error.message);\n    }\n  };\n\n  // Delete a note\n  const deletemenu = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    if (!response.ok) {\n      // Handle the error if the delete request fails\n      throw new Error(`Failed to delete menu item with id ${id}`);\n    }\n\n    // Dispatch the 'DELETE_MENU' action with the id\n    dispatch({\n      type: 'DELETE_MENU',\n      payload: id\n    });\n    const json = response.json(); // parses JSON response into native JavaScript objects\n    console.log(json);\n    console.log(\"Deleting the menu with id\" + id);\n    const newMenuData = menuData.filter(menu => menu._id !== id); // Assuming _id is the unique identifier\n    setMenuData(newMenuData);\n  };\n\n  // Edit a note\n  const editMenu = async (id, name, category, price, description, file) => {\n    // API Call\n    const response = await fetch(`${host}/api/menuData/updatemenu/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        name,\n        category,\n        price,\n        description,\n        file\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = await response.json(); // parses JSON response into native JavaScript objects\n    console.log(json);\n    let newMenuData = JSON.parse(JSON.stringify(menuData));\n    // Logic to edit in client\n    for (let index = 0; index < newMenuData.length; index++) {\n      const element = newMenuData[index];\n      if (element._id === id) {\n        newMenuData[index].name = name;\n        newMenuData[index].category = category;\n        newMenuData[index].price = price;\n        newMenuData[index].description = description;\n        newMenuData[index].file = file;\n        break;\n      }\n    }\n    setMenuData(newMenuData);\n  };\n  return /*#__PURE__*/_jsxDEV(MenuDataContext.Provider, {\n    value: {\n      menuData,\n      addMenu,\n      getMenu,\n      editMenu,\n      deletemenu\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(MenuState, \"pz/V0KsRvRYwY/ojcZpEjJtgYGI=\");\n_c = MenuState;\nexport default MenuState;\nvar _c;\n$RefreshReg$(_c, \"MenuState\");","map":{"version":3,"names":["React","useReducer","MenuDataContext","jsxDEV","_jsxDEV","menuDataReducer","state","action","type","payload","initialState","MenuState","props","_s","host","menuData","dispatch","getMenu","response","fetch","method","headers","json","setMenuData","addMenu","name","category","price","description","file","localStorage","getItem","body","JSON","stringify","ok","Error","menu","console","log","error","message","deletemenu","id","newMenuData","filter","_id","editMenu","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/food-ordering/src/context/MenuState.js"],"sourcesContent":["import React, { useReducer } from 'react';\r\nimport MenuDataContext from './menuContext'; // Import the new context\r\n\r\nfunction menuDataReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_MENU_DATA':\r\n            return action.payload;\r\n        case 'ADD_MENU':\r\n            return [...state, action.payload];\r\n        // Add more cases for edit and delete actions if needed\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialState = []; // Initial state for the menu data\r\n\r\nconst MenuState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n\r\n    const [menuData, dispatch] = useReducer(menuDataReducer, initialState);\r\n\r\n    const getMenu = async () => {\r\n\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n\r\n        });\r\n        const json = await response.json()\r\n        setMenuData(json);\r\n    }\r\n\r\n    // Add a menu      \r\n    const addMenu = async (name, category, price, description, file) => {\r\n        try {\r\n            // Make a POST request to add the new menu item\r\n            const response = await fetch(`${host}/api/menuData/addmenu`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({ name, category, price, description, file })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                // Handle the error if the POST request fails\r\n                throw new Error('Failed to add a new menu item.');\r\n            }\r\n\r\n            // Parse the response to get the newly added menu item\r\n            const menu = await response.json();\r\n\r\n            // Dispatch the 'ADD_MENU' action with the new menu item as payload\r\n            dispatch({ type: 'ADD_MENU', payload: menu });\r\n\r\n            // Optionally, you can show a success message or perform other actions\r\n            console.log('Menu item added successfully.');\r\n        } catch (error) {\r\n            // Handle any errors that occurred during the POST request\r\n            console.error(error.message);\r\n        }\r\n    }\r\n\r\n    // Delete a note\r\n    const deletemenu = async (id) => {\r\n        // API Call\r\n        const response = await fetch(`${host}/api/menuData/deletemenu/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"auth-token\": localStorage.getItem('token')\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            // Handle the error if the delete request fails\r\n            throw new Error(`Failed to delete menu item with id ${id}`);\r\n        }\r\n\r\n        // Dispatch the 'DELETE_MENU' action with the id\r\n        dispatch({ type: 'DELETE_MENU', payload: id });\r\n        const json = response.json(); // parses JSON response into native JavaScript objects\r\n        console.log(json)\r\n\r\n        console.log(\"Deleting the menu with id\" + id)\r\n        const newMenuData = menuData.filter((menu) => menu._id !== id); // Assuming _id is the unique identifier\r\n        setMenuData(newMenuData);\r\n    }\r\n\r\n    // Edit a note\r\n    const editMenu = async (id, name, category, price, description, file) => {\r\n        // API Call\r\n        const response = await fetch(`${host}/api/menuData/updatemenu/${id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"auth-token\": localStorage.getItem('token')\r\n            },\r\n\r\n            body: JSON.stringify({ name, category, price, description, file }) // body data type must match \"Content-Type\" header\r\n        });\r\n        const json = await response.json(); // parses JSON response into native JavaScript objects\r\n        console.log(json);\r\n        let newMenuData = JSON.parse(JSON.stringify(menuData))\r\n        // Logic to edit in client\r\n        for (let index = 0; index < newMenuData.length; index++) {\r\n            const element = newMenuData[index];\r\n            if (element._id === id) {\r\n                newMenuData[index].name = name;\r\n                newMenuData[index].category = category;\r\n                newMenuData[index].price = price;\r\n                newMenuData[index].description = description;\r\n                newMenuData[index].file = file;\r\n                break;\r\n            }\r\n        }\r\n        setMenuData(newMenuData);\r\n    }\r\n\r\n    return (\r\n        <MenuDataContext.Provider value={{ menuData, addMenu, getMenu, editMenu, deletemenu }}>\r\n            {props.children}\r\n        </MenuDataContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MenuState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}