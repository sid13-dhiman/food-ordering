{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\food-ordering\\\\src\\\\context\\\\MenuState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport menuContext from \"./menuContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const menuDataInitial = [];\n  const [menuData, setMenuData] = useState(menuDataInitial);\n  const getMenu = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setMenuData(json);\n  };\n\n  // Add a menu    \n  const addMenu = async (name, category, menus, description) => {\n    try {\n      const response = await fetch(`${host}/api/menuData/addmenu`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          category,\n          menus,\n          description\n        })\n      });\n      if (!response.ok) {\n        // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\n        const errorMessage = await response.text();\n        console.error(\"HTTP Error:\", errorMessage);\n        // Handle the error as needed, e.g., display an error message to the user.\n      } else {\n        // Parse the JSON response when successful\n        const newMenu = await response.json();\n        setMenuData([...menuData, newMenu]);\n      }\n    } catch (error) {\n      // Handle network errors or exceptions\n      console.error(\"Network error:\", error);\n      // Handle the error as needed.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(menuContext.Provider, {\n    value: {\n      menuData,\n      addMenu,\n      getMenu\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(MenuState, \"d2WQnwFNpA7H4/hXixOcUYWYmc8=\");\n_c = MenuState;\nexport default MenuState;\nvar _c;\n$RefreshReg$(_c, \"MenuState\");","map":{"version":3,"names":["React","useState","menuContext","jsxDEV","_jsxDEV","MenuState","props","_s","host","menuDataInitial","menuData","setMenuData","getMenu","response","fetch","method","headers","json","addMenu","name","category","menus","description","body","JSON","stringify","ok","errorMessage","text","console","error","newMenu","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/food-ordering/src/context/MenuState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport menuContext from \"./menuContext\";\r\n\r\nconst MenuState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const menuDataInitial = [];\r\n    const [menuData, setMenuData] = useState(menuDataInitial);\r\n    \r\n\r\n    const getMenu = async () =>{\r\n\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/menuData/fetchmenudata`, {\r\n            method: \"GET\", \r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n           \r\n          });\r\n          const json = await response.json()\r\n          setMenuData(json);\r\n      }\r\n    \r\n    // Add a menu    \r\n    const addMenu = async (name, category, menus, description) => {\r\n        try {\r\n            const response = await fetch(`${host}/api/menuData/addmenu`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ name, category, menus, description })\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                // Handle HTTP error status codes (e.g., 400 Bad Request, 500 Internal Server Error)\r\n                const errorMessage = await response.text();\r\n                console.error(\"HTTP Error:\", errorMessage);\r\n                // Handle the error as needed, e.g., display an error message to the user.\r\n            } else {\r\n                // Parse the JSON response when successful\r\n                const newMenu = await response.json();\r\n                setMenuData([...menuData, newMenu]);\r\n            }\r\n        } catch (error) {\r\n            // Handle network errors or exceptions\r\n            console.error(\"Network error:\", error);\r\n            // Handle the error as needed.\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <menuContext.Provider value={{ menuData, addMenu, getMenu }}>\r\n            {props.children}\r\n        </menuContext.Provider>\r\n    );\r\n};\r\n\r\nexport default MenuState;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,eAAe,GAAG,EAAE;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACQ,eAAe,CAAC;EAGzD,MAAMG,OAAO,GAAG,MAAAA,CAAA,KAAW;IAEvB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,6BAA4B,EAAE;MAC/DO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IAEF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCN,WAAW,CAACM,IAAI,CAAC;EACrB,CAAC;;EAEH;EACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,WAAW,KAAK;IAC1D,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,uBAAsB,EAAE;QACzDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,IAAI;UAAEC,QAAQ;UAAEC,KAAK;UAAEC;QAAY,CAAC;MAC/D,CAAC,CAAC;MAEF,IAAI,CAACT,QAAQ,CAACa,EAAE,EAAE;QACd;QACA,MAAMC,YAAY,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;QAC1CC,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEH,YAAY,CAAC;QAC1C;MACJ,CAAC,MAAM;QACH;QACA,MAAMI,OAAO,GAAG,MAAMlB,QAAQ,CAACI,IAAI,CAAC,CAAC;QACrCN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEqB,OAAO,CAAC,CAAC;MACvC;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ;MACAD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC;IACJ;EACJ,CAAC;;EAED,oBACI1B,OAAA,CAACF,WAAW,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,QAAQ;MAAEQ,OAAO;MAAEN;IAAQ,CAAE;IAAAsB,QAAA,EACvD5B,KAAK,CAAC4B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;AAAC/B,EAAA,CArDIF,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAuDf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}